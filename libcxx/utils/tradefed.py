# ===----------------------------------------------------------------------===##
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# ===----------------------------------------------------------------------===##

"""
Bundles an executable along with its dependencies into a directory suitable
for running an individual test at a later time.
"""

import argparse
from lxml.etree import Element, tostring
from lxml.builder import ElementMaker
from pathlib import Path


class TradefedBundler:
    def __init__(
        self, host: bool, xfail: bool, dependencies: list[Path], env: list[str]
    ) -> None:
        self.host = host
        self.xfail = xfail
        self.dependencies = dependencies
        self.env = env
        self.builder = ElementMaker()

    def create_bundle(self, output: Path, command: list[str]) -> None:
        output.write_bytes(
            tostring(
                self.create_config(str(output), command),
                pretty_print=True,
                xml_declaration=True,
                encoding="utf-8",
            )
        )

    def test_path(self, path: Path) -> Path:
        return path

    @staticmethod
    def is_test_exe(arg: str) -> bool:
        # If an argument is a file that ends in `.tmp.exe`, assume it is the name of an
        # executable generated by a test file. We call these test-executables below.
        # This allows us to do custom processing like codesigning test-executables and
        # changing their path when running from the bundle. It's also possible for there
        # to be no such executable, for example in the case of a .sh.cpp test.
        return arg.endswith(".tmp.exe") and Path(arg).exists()

    def substitute_file_paths(self, arg: str) -> str:
        for dep in self.dependencies:
            if not dep.is_absolute:
                continue
            if str(dep) in arg:
                arg = arg.replace(str(dep), str(self.test_path(dep)))
        return arg

    def create_config(self, test_name: str, command: list[str]) -> None:
        children = []
        if not self.host:
            children.append(self.create_preparer())
        children.append(self.create_test(command))

        return self.builder.configuration(*children, description=test_name)

    def create_preparer(self) -> None:
        return self.builder.target_preparer()

    def create_test(self, command: list[str]) -> Element:
        return self.builder.test(
            self.build_command_line(command),
            **{"class": "com.android.tradefed.testtype.binary.ExecutableHostTest"},
        )

    def build_command_line(self, command: list[str]) -> Element:
        return self.builder.option(
            name="test-command-line",
            key="test",
            value=" ".join(self.substitute_file_paths(x) for x in command),
        )


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("--host", action="store_true")
    parser.add_argument("--output", type=Path, required=True)
    parser.add_argument("--env", nargs="*", default=[])
    parser.add_argument(
        "--dependency", dest="dependencies", action="append", type=Path, default=[]
    )
    parser.add_argument("--xfail", action="store_true")
    parser.add_argument("command", nargs="+")
    args = parser.parse_args()

    TradefedBundler(args.host, args.xfail, args.dependencies, args.env).create_bundle(
        args.output, args.command
    )


if __name__ == "__main__":
    main()
