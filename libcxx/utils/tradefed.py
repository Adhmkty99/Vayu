# ===----------------------------------------------------------------------===##
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# ===----------------------------------------------------------------------===##

"""
Bundles an executable along with its dependencies into a directory suitable
for running an individual test at a later time.
"""

import argparse
from dataclasses import dataclass
from functools import cached_property
from pathlib import Path
import pickle
from typing import Any


@dataclass(frozen=True)
class TestDef:
    name: str
    raw_command: list[str]
    xfail: bool
    dependencies: list[Path]
    env: list[str]

    def test_path(self, path: Path) -> Path:
        return path

    @staticmethod
    def is_test_exe(arg: str) -> bool:
        # If an argument is a file that ends in `.tmp.exe`, assume it is the name of an
        # executable generated by a test file. We call these test-executables below.
        # This allows us to do custom processing like codesigning test-executables and
        # changing their path when running from the bundle. It's also possible for there
        # to be no such executable, for example in the case of a .sh.cpp test.
        return arg.endswith(".tmp.exe") and Path(arg).exists()

    def substitute_file_paths(self, arg: str) -> str:
        for dep in self.dependencies:
            if not dep.is_absolute:
                continue
            if str(dep) in arg:
                arg = arg.replace(str(dep), str(self.test_path(dep)))
        return arg

    @cached_property
    def command(self) -> str:
        return " ".join(self.substitute_file_paths(x) for x in self.raw_command)


def make_test_name(output_path: Path) -> str:
    return str(output_path).replace("/", ".").removesuffix(".test.p")


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("--output", type=Path, required=True)
    parser.add_argument("--env", nargs="*", default=[])
    parser.add_argument(
        "--dependency", dest="dependencies", action="append", type=Path, default=[]
    )
    parser.add_argument("--xfail", action="store_true")
    parser.add_argument("command", nargs="+")
    args = parser.parse_args()

    test = TestDef(
        make_test_name(args.output),
        args.command,
        args.xfail,
        args.dependencies,
        args.env,
    )
    with args.output.open("wb") as output:
        pickle.dump(test, output)


if __name__ == "__main__":
    main()
